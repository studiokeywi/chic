{
  "version": 3,
  "sources": ["../../lib/plugins/drawImage.ts"],
  "sourcesContent": ["import type { Chic, ChicPlugin } from 'chic';\r\n\r\n/** Get image data from a source by drawing it to a canvas and converting the pixel data into `rgba(r, g, b, a)` strings\r\n * @param image */\r\nconst generateRGBAStrings = (drawFont: Chic, data: Uint8ClampedArray) => {\r\n  const hexStrs: string[] = [];\r\n  let curPixel: number[] = [];\r\n  for (let idx = 0; idx < data.length; idx++) {\r\n    if (!(idx % 4)) curPixel = [];\r\n    curPixel.push(data[idx]);\r\n    if (curPixel.length < 4) continue;\r\n    const rgba = `rgba(${curPixel.join(',')})`;\r\n    hexStrs.push(drawFont.backgroundColor[rgba].border[`solid ${rgba} 5px`]());\r\n  }\r\n  return hexStrs;\r\n};\r\n// TODO: documentation\r\nconst install = (chic: Chic) => {\r\n  // prettier-ignore\r\n  const drawFont = chic\r\n    .fontFamily.monospace\r\n    .fontSize  ._10px\r\n    .lineHeight._10px\r\n    .margin    ._0\r\n    .padding   ._0\r\n    .fix();\r\n  const drawStyle = drawFont();\r\n  /** Draws an image to the console, if it is drawable to an HTML Canvas */\r\n  return <DrawImage>(image => {\r\n    const canvas = document.createElement('canvas');\r\n    const ctx = canvas.getContext('2d', { willReadFrequently: true })!;\r\n    const { height, width } = parseDimensions(image);\r\n    Object.assign(canvas, { height, width });\r\n    ctx.drawImage(image, 0, 0);\r\n    const { data } = ctx.getImageData(0, 0, width, height);\r\n    const hexStyles = generateRGBAStrings(drawFont, data);\r\n    const text = [];\r\n    const styles = [];\r\n    for (let row = 0; row < height; row++) {\r\n      for (let col = 0; col < width; col++) {\r\n        text.push('  ');\r\n        styles.push(hexStyles[col + row * width]);\r\n      }\r\n      text.push('\\n');\r\n      styles.push(drawStyle);\r\n    }\r\n    chic.log(text, ...styles);\r\n  });\r\n};\r\n\r\n/** Get the height and width values as numbers from a CanvasImageSource\r\n * @param image */\r\nconst parseDimensions = (\r\n  image: CanvasImageSource & { height?: number | SVGAnimatedLength; width?: number | SVGAnimatedLength }\r\n) => {\r\n  let { height = 0, width = 0 } = image;\r\n  if (height instanceof SVGAnimatedLength) height = height.animVal.value;\r\n  if (width instanceof SVGAnimatedLength) width = width.animVal.value;\r\n  if (height * width > 65355) throw new TypeError('Image too large for Chic to render');\r\n  return { height, width };\r\n};\r\n\r\n// TODO: documentation\r\nconst drawImage = <ChicPlugin>{ id: 'drawImage', install };\r\n\r\nexport { drawImage };\r\n\r\n/** Draws an image to the console. Works best with small pixel artwork no larger than 256 x 256 (or approximately 65,536 pixels). Internally uses an `HTMLCanvasElement` to obtain pixel color data. */\r\nexport interface DrawImage {\r\n  (image: CanvasImageSource): void;\r\n}\r\n\r\ndeclare module 'chic' {\r\n  interface ChicPlugins {\r\n    /** Draws an image to the console. Works best with small pixel artwork no larger than 256 x 256 (or approximately 65,536 pixels). Internally uses an `HTMLCanvasElement` to obtain pixel color data.\r\n     * @internal */\r\n    drawImage: DrawImage;\r\n  }\r\n}\r\n"],
  "mappings": "AAIA,MAAM,sBAAsB,CAAC,UAAgB,SAA4B;AACvE,QAAM,UAAoB,CAAC;AAC3B,MAAI,WAAqB,CAAC;AAC1B,WAAS,MAAM,GAAG,MAAM,KAAK,QAAQ,OAAO;AAC1C,QAAI,EAAE,MAAM;AAAI,iBAAW,CAAC;AAC5B,aAAS,KAAK,KAAK,GAAG,CAAC;AACvB,QAAI,SAAS,SAAS;AAAG;AACzB,UAAM,OAAO,QAAQ,SAAS,KAAK,GAAG,CAAC;AACvC,YAAQ,KAAK,SAAS,gBAAgB,IAAI,EAAE,OAAO,SAAS,IAAI,MAAM,EAAE,CAAC;AAAA,EAC3E;AACA,SAAO;AACT;AAEA,MAAM,UAAU,CAAC,SAAe;AAE9B,QAAM,WAAW,KACd,WAAW,UACX,SAAW,MACX,WAAW,MACX,OAAW,GACX,QAAW,GACX,IAAI;AACP,QAAM,YAAY,SAAS;AAE3B,SAAmB,WAAS;AAC1B,UAAM,SAAS,SAAS,cAAc,QAAQ;AAC9C,UAAM,MAAM,OAAO,WAAW,MAAM,EAAE,oBAAoB,KAAK,CAAC;AAChE,UAAM,EAAE,QAAQ,MAAM,IAAI,gBAAgB,KAAK;AAC/C,WAAO,OAAO,QAAQ,EAAE,QAAQ,MAAM,CAAC;AACvC,QAAI,UAAU,OAAO,GAAG,CAAC;AACzB,UAAM,EAAE,KAAK,IAAI,IAAI,aAAa,GAAG,GAAG,OAAO,MAAM;AACrD,UAAM,YAAY,oBAAoB,UAAU,IAAI;AACpD,UAAM,OAAO,CAAC;AACd,UAAM,SAAS,CAAC;AAChB,aAAS,MAAM,GAAG,MAAM,QAAQ,OAAO;AACrC,eAAS,MAAM,GAAG,MAAM,OAAO,OAAO;AACpC,aAAK,KAAK,IAAI;AACd,eAAO,KAAK,UAAU,MAAM,MAAM,KAAK,CAAC;AAAA,MAC1C;AACA,WAAK,KAAK,IAAI;AACd,aAAO,KAAK,SAAS;AAAA,IACvB;AACA,SAAK,IAAI,MAAM,GAAG,MAAM;AAAA,EAC1B;AACF;AAIA,MAAM,kBAAkB,CACtB,UACG;AACH,MAAI,EAAE,SAAS,GAAG,QAAQ,EAAE,IAAI;AAChC,MAAI,kBAAkB;AAAmB,aAAS,OAAO,QAAQ;AACjE,MAAI,iBAAiB;AAAmB,YAAQ,MAAM,QAAQ;AAC9D,MAAI,SAAS,QAAQ;AAAO,UAAM,IAAI,UAAU,oCAAoC;AACpF,SAAO,EAAE,QAAQ,MAAM;AACzB;AAGA,MAAM,YAAwB,EAAE,IAAI,aAAa,QAAQ;",
  "names": []
}
