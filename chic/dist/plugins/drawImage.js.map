{
  "version": 3,
  "sources": ["../../lib/plugins/drawImage.ts"],
  "sourcesContent": ["import { Chic } from '../index.js';\r\nimport { ChicPlugin } from './index.js';\r\n\r\nconst install = (chic: Chic) => {\r\n  const canvas = document.createElement('canvas');\r\n  const ctx = canvas.getContext('2d', { willReadFrequently: true });\r\n  const drawFont = chic.fontFamily.monospace.fontSize._10px.lineHeight._10px.margin._0.padding._0.fix();\r\n  const drawStyle = drawFont();\r\n  /** Get image data from a source by drawing it to a canvas and converting the pixel data into `rgba(r, g, b, a)` strings\r\n   * @param image */\r\n  const generateRGBAStrings = (data: Uint8ClampedArray) => {\r\n    const hexStrs: string[] = [];\r\n    let curPixel: number[];\r\n    for (let idx = 0; idx < data.length; idx++) {\r\n      if (!(idx % 4)) curPixel = [];\r\n      curPixel.push(data[idx]);\r\n      if (curPixel.length !== 4) continue;\r\n      const rgba = `rgba(${curPixel.join(',')})`;\r\n      hexStrs.push(drawFont.backgroundColor[rgba].border[`solid ${rgba} 5px`]());\r\n    }\r\n    return hexStrs;\r\n  };\r\n  /** Get the height and width values as numbers from a CanvasImageSource\r\n   * @param image */\r\n  const parseDimensions = (image: CanvasImageSource) => {\r\n    let { height, width } = image;\r\n    if (height instanceof SVGAnimatedLength) height = height.animVal.value;\r\n    if (width instanceof SVGAnimatedLength) width = width.animVal.value;\r\n    if (height * width > 65355) throw new TypeError('Image too large for Chic to render');\r\n    return { height, width };\r\n  };\r\n  // TODO: figure out how to apply intellisense from here to actual object, if possible\r\n  /** Draws an image to the console, if it is drawable to an HTML Canvas\r\n   * @param  image */\r\n  return (image: CanvasImageSource) => {\r\n    const { height, width } = parseDimensions(image);\r\n    canvas.height = height;\r\n    canvas.width = width;\r\n    ctx.drawImage(image, 0, 0);\r\n    const { data } = ctx.getImageData(0, 0, width, height);\r\n    const hexValues = generateRGBAStrings(data);\r\n    const text = [];\r\n    const styles = [];\r\n    for (let row = 0; row < height; row++) {\r\n      for (let col = 0; col < width; col++) {\r\n        text.push('  ');\r\n        styles.push(hexValues[col + row * width]);\r\n      }\r\n      text.push('\\n');\r\n      styles.push(drawStyle);\r\n    }\r\n    chic.log(text, ...styles);\r\n  };\r\n};\r\n\r\nexport default { id: 'drawImage', install } as ChicPlugin;\r\n"],
  "mappings": "AAGA,MAAM,UAAU,CAAC,SAAe;AAC9B,QAAM,SAAS,SAAS,cAAc,QAAQ;AAC9C,QAAM,MAAM,OAAO,WAAW,MAAM,EAAE,oBAAoB,KAAK,CAAC;AAChE,QAAM,WAAW,KAAK,WAAW,UAAU,SAAS,MAAM,WAAW,MAAM,OAAO,GAAG,QAAQ,GAAG,IAAI;AACpG,QAAM,YAAY,SAAS;AAG3B,QAAM,sBAAsB,CAAC,SAA4B;AACvD,UAAM,UAAoB,CAAC;AAC3B,QAAI;AACJ,aAAS,MAAM,GAAG,MAAM,KAAK,QAAQ,OAAO;AAC1C,UAAI,EAAE,MAAM;AAAI,mBAAW,CAAC;AAC5B,eAAS,KAAK,KAAK,GAAG,CAAC;AACvB,UAAI,SAAS,WAAW;AAAG;AAC3B,YAAM,OAAO,QAAQ,SAAS,KAAK,GAAG;AACtC,cAAQ,KAAK,SAAS,gBAAgB,IAAI,EAAE,OAAO,SAAS,UAAU,EAAE,CAAC;AAAA,IAC3E;AACA,WAAO;AAAA,EACT;AAGA,QAAM,kBAAkB,CAAC,UAA6B;AACpD,QAAI,EAAE,QAAQ,MAAM,IAAI;AACxB,QAAI,kBAAkB;AAAmB,eAAS,OAAO,QAAQ;AACjE,QAAI,iBAAiB;AAAmB,cAAQ,MAAM,QAAQ;AAC9D,QAAI,SAAS,QAAQ;AAAO,YAAM,IAAI,UAAU,oCAAoC;AACpF,WAAO,EAAE,QAAQ,MAAM;AAAA,EACzB;AAIA,SAAO,CAAC,UAA6B;AACnC,UAAM,EAAE,QAAQ,MAAM,IAAI,gBAAgB,KAAK;AAC/C,WAAO,SAAS;AAChB,WAAO,QAAQ;AACf,QAAI,UAAU,OAAO,GAAG,CAAC;AACzB,UAAM,EAAE,KAAK,IAAI,IAAI,aAAa,GAAG,GAAG,OAAO,MAAM;AACrD,UAAM,YAAY,oBAAoB,IAAI;AAC1C,UAAM,OAAO,CAAC;AACd,UAAM,SAAS,CAAC;AAChB,aAAS,MAAM,GAAG,MAAM,QAAQ,OAAO;AACrC,eAAS,MAAM,GAAG,MAAM,OAAO,OAAO;AACpC,aAAK,KAAK,IAAI;AACd,eAAO,KAAK,UAAU,MAAM,MAAM,KAAK,CAAC;AAAA,MAC1C;AACA,WAAK,KAAK,IAAI;AACd,aAAO,KAAK,SAAS;AAAA,IACvB;AACA,SAAK,IAAI,MAAM,GAAG,MAAM;AAAA,EAC1B;AACF;AAEA,IAAO,oBAAQ,EAAE,IAAI,aAAa,QAAQ;",
  "names": []
}
