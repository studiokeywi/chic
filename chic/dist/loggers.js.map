{
  "version": 3,
  "sources": ["../lib/loggers.ts"],
  "sourcesContent": ["/** All valid Chic logger modes */\r\nconst chicModes = ['debug', 'error', 'group', 'groupCollapsed', 'info', 'log', 'warn'];\r\n\r\n/** Prefixes a string with `%c` if needed to apply CSS styling\r\n * @param {string} str Text segment\r\n * @returns The wrapped text (if required) */\r\nconst cssWrap = (str: string) => (str !== '' ? `%c${str}` : str);\r\n/** Wrapper for `console.groupEnd` */\r\nconst groupEnd = () => console.groupEnd();\r\n/** Create an Object entry for a given Chic logger mode\r\n * @param {string} mode Logger mode\r\n * @returns An Object entry for the Chic logger */\r\nconst loggerMap = (mode: string) => {\r\n  const logger: ChicLogger = (strs, ...styles: string[]) => {\r\n    while (styles.length < strs.length) styles.push('');\r\n    console[mode](useCss(strs, styles), ...styles);\r\n  };\r\n  return [mode, logger];\r\n};\r\n/** Applies necessary CSS wrapping around text segments for use in logging\r\n * @param strs Text to display\r\n * @param styles Styles array\r\n * @returns A single CSS formatted string */\r\nconst useCss = (strs: TemplateStringsArray | string[], { length }: string[]) =>\r\n  (length ? strs.map(cssWrap).filter(Boolean) : strs).join('');\r\n\r\n/** Chic logger methods */\r\nexport const buildLoggers = (): ChicLoggers =>\r\n  Object.fromEntries([['groupEnd', groupEnd], ...chicModes.map(/* @__PURE__ */ loggerMap)]);\r\n\r\n/** Shape of a Chic logger function */\r\nexport type ChicLogger = {\r\n  // TODO: documentation\r\n  (strs: TemplateStringsArray | string[], ...styles: string[]): void;\r\n};\r\n/** All available Chic logging functions */\r\nexport type ChicLoggers = {\r\n  /** Logs to the debug level console. Use this syntax when you want to apply styling to a variable\r\n   * @param strs Text to display. Include variables that need styling here\r\n   * @param styles Style strings in order, including empty strings for unstyled segments\r\n   * @example const username = getUser().name;\r\n   *    chic.debug(['Signed in as:', username], '', chic.fontWeight.bold()) */\r\n  debug(strs: string[], ...styles: string[]): void;\r\n  /** Logs to the debug level console using a tagged template\r\n   * @example chic.debug`Total | ${''}Success${chic.color.green()} | ${''}Failed${chic.color.red()}`; */\r\n  debug(strs: TemplateStringsArray, ...styles: string[]): void;\r\n  /** Logs to the error level console. Use this syntax when you want to apply styling to a variable\r\n   * @param strs Text to display. Include variables that need styling here\r\n   * @param styles Style strings in order, including empty strings for unstyled segments\r\n   * @example const username = getUser().name;\r\n   *    chic.error(['Signed in as:', username], '', chic.fontWeight.bold()) */\r\n  error(strs: string[], ...styles: string[]): void;\r\n  /** Logs to the error level console using a tagged template\r\n   * @example chic.error`Total | ${''}Success${chic.color.green()} | ${''}Failed${chic.color.red()}`; */\r\n  error(strs: TemplateStringsArray, ...styles: string[]): void;\r\n  /** Logs to the group level console. Use this syntax when you want to apply styling to a variable\r\n   * @param strs Text to display. Include variables that need styling here\r\n   * @param styles Style strings in order, including empty strings for unstyled segments\r\n   * @example const username = getUser().name;\r\n   *    chic.group(['Signed in as:', username], '', chic.fontWeight.bold()) */\r\n  group(strs: string[], ...styles: string[]): void;\r\n  /** Logs to the group level console using a tagged template\r\n   * @example chic.group`Total | ${''}Success${chic.color.green()} | ${''}Failed${chic.color.red()}`; */\r\n  group(strs: TemplateStringsArray, ...styles: string[]): void;\r\n  /** Logs to the groupCollapsed level console. Use this syntax when you want to apply styling to a variable\r\n   * @param strs Text to display. Include variables that need styling here\r\n   * @param styles Style strings in order, including empty strings for unstyled segments\r\n   * @example const username = getUser().name;\r\n   *    chic.groupCollapsed(['Signed in as:', username], '', chic.fontWeight.bold()) */\r\n  groupCollapsed(strs: string[], ...styles: string[]): void;\r\n  /** Logs to the groupCollapsed level console using a tagged template\r\n   * @example chic.groupCollapsed`Total | ${''}Success${chic.color.green()} | ${''}Failed${chic.color.red()}`; */\r\n  groupCollapsed(strs: TemplateStringsArray, ...styles: string[]): void;\r\n  /** Ends the current console group */\r\n  groupEnd(): void;\r\n  /** Logs to the default level console. Use this syntax when you want to apply styling to a variable\r\n   * @param strs Text to display. Include variables that need styling here\r\n   * @param styles Style strings in order, including empty strings for unstyled segments\r\n   * @example const username = getUser().name;\r\n   *    chic.info(['Signed in as:', username], '', chic.fontWeight.bold()) */\r\n  info(strs: string[], ...styles: string[]): void;\r\n  /** Logs to the default level console using a tagged template\r\n   * @example chic.info`Total | ${''}Success${chic.color.green()} | ${''}Failed${chic.color.red()}`; */\r\n  info(strs: TemplateStringsArray, ...styles: string[]): void;\r\n  /** Logs to the default level console. Use this syntax when you want to apply styling to a variable\r\n   * @param strs Text to display. Include variables that need styling here\r\n   * @param styles Style strings in order, including empty strings for unstyled segments\r\n   * @example const username = getUser().name;\r\n   *    chic.log(['Signed in as:', username], '', chic.fontWeight.bold()) */\r\n  log(strs: string[], ...styles: string[]): void;\r\n  /** Logs to the default level console using a tagged template\r\n   * @example chic.log`Total | ${''}Success${chic.color.green()} | ${''}Failed${chic.color.red()}`; */\r\n  log(strs: TemplateStringsArray, ...styles: string[]): void;\r\n  /** Logs to the warn level console. Use this syntax when you want to apply styling to a variable\r\n   * @param strs Text to display. Include variables that need styling here\r\n   * @param styles Style strings in order, including empty strings for unstyled segments\r\n   * @example const username = getUser().name;\r\n   *    chic.warn(['Signed in as:', username], '', chic.fontWeight.bold()) */\r\n  warn(strs: string[], ...styles: string[]): void;\r\n  /** Logs to the warn level console using a tagged template\r\n   * @example chic.warn`Total | ${''}Success${chic.color.green()} | ${''}Failed${chic.color.red()}`; */\r\n  warn(strs: TemplateStringsArray, ...styles: string[]): void;\r\n};\r\n"],
  "mappings": "AACA,MAAM,YAAY,CAAC,SAAS,SAAS,SAAS,kBAAkB,QAAQ,OAAO,MAAM;AAKrF,MAAM,UAAU,CAAC,QAAiB,QAAQ,KAAK,KAAK,QAAQ;AAE5D,MAAM,WAAW,MAAM,QAAQ,SAAS;AAIxC,MAAM,YAAY,CAAC,SAAiB;AAClC,QAAM,SAAqB,CAAC,SAAS,WAAqB;AACxD,WAAO,OAAO,SAAS,KAAK;AAAQ,aAAO,KAAK,EAAE;AAClD,YAAQ,IAAI,EAAE,OAAO,MAAM,MAAM,GAAG,GAAG,MAAM;AAAA,EAC/C;AACA,SAAO,CAAC,MAAM,MAAM;AACtB;AAKA,MAAM,SAAS,CAAC,MAAuC,EAAE,OAAO,OAC7D,SAAS,KAAK,IAAI,OAAO,EAAE,OAAO,OAAO,IAAI,MAAM,KAAK,EAAE;AAGtD,MAAM,eAAe,MAC1B,OAAO,YAAY,CAAC,CAAC,YAAY,QAAQ,GAAG,GAAG,UAAU,IAAoB,SAAS,CAAC,CAAC;",
  "names": []
}
