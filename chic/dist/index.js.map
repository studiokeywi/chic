{
  "version": 3,
  "sources": ["../lib/index.ts"],
  "sourcesContent": ["import { ChicPlugin, ChicPluginFunction, drawImage, labelMaker, snoop, timestamp } from './plugins/index.js';\r\n\r\n/** All valid Chic logger modes */\r\nconst chicModes = ['debug', 'error', 'group', 'groupCollapsed', 'info', 'log', 'warn'];\r\n/** Regular Expressions used to parse special property name syntaxes */\r\nconst rgx = {\r\n  /** Used to unconvert kebab-case replacements inside quotes (e `font-family: \"-fira-code\"`) */\r\n  dashes: /-/g,\r\n  /** Convert dollar signs to pound signs for hex values */\r\n  hex: /\\$/g,\r\n  /** Convert `backgroundColor` style text to `background-color` */\r\n  kebab: /(?=[A-Z])/,\r\n  /** Remove leading underscores from a style string */\r\n  lead: /(^_)/,\r\n  /** Convert `5_2` style numbers to `5.2` */\r\n  number: /(\\d+)_(\\d+)/g,\r\n  /** Convert `solid_black` style text to `solid black` */\r\n  snake: /_/g,\r\n  /** Check for situations requiring quotes (eg `font-family: \"Fira Code\";`) */\r\n  quote: /\"[^\"]*?\"/g,\r\n};\r\n\r\n/** Prefixes a string with `%c` if needed to apply CSS styling\r\n * @param {string} str Text segment\r\n * @returns The wrapped text (if required) */\r\nconst cssWrap = (str: string) => (str !== '' ? `%c${str}` : str);\r\n/** Converts special property syntax into valid CSS strings\r\n * @param {string} str Special syntax string\r\n * @returns CSS style string */\r\nconst format = (str: string) => {\r\n  const trimmedFront = str.replace(rgx.lead, '');\r\n  const replacedDollarSigns = trimmedFront.replaceAll(rgx.hex, '#');\r\n  const convertedNumberFormat = replacedDollarSigns.replaceAll(rgx.number, '$1.$2');\r\n  const convertedSnakeCases = convertedNumberFormat.replaceAll(rgx.snake, ' ');\r\n  const splitKebabs = convertedSnakeCases.split(rgx.kebab);\r\n  const convertedKebabCases = splitKebabs.reduce((out, str) => `${out}${out ? '-' : ''}${str.toLowerCase()}`, '');\r\n  const fixedQuotes = convertedKebabCases.replaceAll(\r\n    rgx.quote,\r\n    match => str.match(new RegExp(match.replaceAll(rgx.dashes, ''), 'i'))[0]\r\n  );\r\n  return fixedQuotes;\r\n};\r\n/** Wrapper for `console.groupEnd` */\r\nconst groupEnd = () => console.groupEnd();\r\n/** Create an Object entry for a given Chic logger mode\r\n * @param {string} mode Logger mode\r\n * @returns An Object entry for the Chic logger */\r\nconst loggerMap = (mode: string) => {\r\n  const logger: ChicLogger = (strs, ...styles: string[]) => {\r\n    while (styles.length < strs.length) styles.push('');\r\n    console[mode](useCss(strs, styles), ...styles);\r\n  };\r\n  return [mode, logger];\r\n};\r\n/** Applies necessary CSS wrapping around text segments for use in logging\r\n * @param strs Text to display\r\n * @param styles Styles array\r\n * @returns A single CSS formatted string */\r\nconst useCss = (strs: TemplateStringsArray | string[], { length }: string[]) =>\r\n  (length ? strs.map(cssWrap).filter(Boolean) : strs).join('');\r\n\r\n/** Builds a new instance of a Chic logger\r\n * @param {import('@studiokeywi/chic').ChicConfig} config Chic config\r\n * @returns A new Chic logger with styles that will always apply */\r\nexport const buildChic = ({ fixed = [], plugins = [] }: ChicConfig = {}) => {\r\n  const chicHandler: ProxyHandler<Chic> = {\r\n    get(self, key, chic) {\r\n      if ('symbol' === typeof key || key in self) return Reflect.get(self, key, chic);\r\n      const last = styles.at(-1);\r\n      const val = format(key);\r\n      !styles.length || last.length > 1 ? styles.push([val]) : last.push(val);\r\n      return chic;\r\n    },\r\n  };\r\n  /** Chic logger methods */\r\n  const loggers = Object.fromEntries([['groupEnd', groupEnd], ...chicModes.map(loggerMap)]);\r\n  /** Current CSS styles */\r\n  const styles: string[][] = [];\r\n  /** Builds the current style string */\r\n  const buildStyle = () => useStyles(true).join(';');\r\n  /** Gets all fixed and pending styles, then resets all currently pending styles\r\n   * @param map Whether to map the inner arrays to single strings joined with `:` */\r\n  const useStyles = (map = false) => {\r\n    const use = [...fixed, ...styles.splice(0, styles.length)];\r\n    return map ? use.map(style => style.join(':')) : use;\r\n  };\r\n  /** Install/Uninstall plugins functions */\r\n  const pluginObj: ChicPlugins = {\r\n    install: (plugin: ChicPlugin) => {\r\n      if (plugin.id in chic.plugins) return chic.warn`Cannot overwrite an existing plugin`;\r\n      const pluginFn = plugin.install(chic);\r\n      if (plugin.uninstall) pluginFn.uninstall = plugin.uninstall;\r\n      chic.plugins[plugin.id] = pluginFn;\r\n    },\r\n    uninstall: (id: string) => {\r\n      if (!(id in chic.plugins)) return;\r\n      chic.plugins[id]?.uninstall?.(chic);\r\n      delete chic.plugins[id];\r\n    },\r\n  };\r\n  /** Loggers, fix, and plugins */\r\n  const chicBase = { ...loggers, fix: () => buildChic({ fixed: useStyles() as string[][] }), plugins: pluginObj };\r\n  /** Chic object */\r\n  const chic: Chic = new Proxy(Object.assign(buildStyle, chicBase), chicHandler);\r\n  plugins.forEach(chic.plugins.install);\r\n  return chic;\r\n};\r\n/** Chic: CSS console formatting through tagged templates */\r\nexport default /* @__PURE__ */ buildChic({ plugins: [drawImage, labelMaker, snoop, timestamp] });\r\n\r\n/** Extra functionality provided by Chic plugins */\r\ninterface ChicPlugins {\r\n  install(plugin: ChicPlugin): void;\r\n  uninstall(id: string): void;\r\n  // [plugin: string]: ChicPluginFunction;\r\n}\r\n/** Chic style builder proxy */\r\ntype ChicCSS = {\r\n  /** Append a new segment to the current style */\r\n  [css: string]: Chic;\r\n};\r\n\r\n/** Browser console logging with CSS formatting */\r\nexport type Chic = {\r\n  /** Builds the current style string */\r\n  (): string;\r\n  // SECTION: chic API\r\n  /** Extra features available from installed plugins */\r\n  plugins: ChicPlugins & { [plugin: string]: ChicPluginFunction };\r\n  /** Create a new Chic instances with the currently pending styles fixed  */\r\n  fix(): Chic;\r\n} & ChicCSS &\r\n  ChicLoggers;\r\n/** Configuration for building Chic instances */\r\nexport type ChicConfig = {\r\n  /** Fixed styles to always apply when building style strings */\r\n  fixed?: string[][];\r\n  /** Plugins to extend Chic functionality */\r\n  plugins?: ChicPlugin[];\r\n};\r\nexport type ChicLogger = {\r\n  (strs: TemplateStringsArray | string[], ...styles: string[]): void;\r\n};\r\nexport type ChicLoggers = {\r\n  /** Logs to the debug level console. Use this syntax when you want to apply styling to a variable\r\n   * @param strs Text to display. Include variables that need styling here\r\n   * @param styles Style strings in order, including empty strings for unstyled segments\r\n   * @example const username = getUser().name;\r\n   *    chic.debug(['Signed in as:', username], '', chic.fontWeight.bold()) */\r\n  debug(strs: string[], ...styles: string[]): void;\r\n  /** Logs to the debug level console using a tagged template\r\n   * @example chic.debug`Total | ${''}Success${chic.color.green()} | ${''}Failed${chic.color.red()}`; */\r\n  debug(strs: TemplateStringsArray, ...styles: string[]): void;\r\n  /** Logs to the error level console. Use this syntax when you want to apply styling to a variable\r\n   * @param strs Text to display. Include variables that need styling here\r\n   * @param styles Style strings in order, including empty strings for unstyled segments\r\n   * @example const username = getUser().name;\r\n   *    chic.error(['Signed in as:', username], '', chic.fontWeight.bold()) */\r\n  error(strs: string[], ...styles: string[]): void;\r\n  /** Logs to the error level console using a tagged template\r\n   * @example chic.error`Total | ${''}Success${chic.color.green()} | ${''}Failed${chic.color.red()}`; */\r\n  error(strs: TemplateStringsArray, ...styles: string[]): void;\r\n  /** Logs to the group level console. Use this syntax when you want to apply styling to a variable\r\n   * @param strs Text to display. Include variables that need styling here\r\n   * @param styles Style strings in order, including empty strings for unstyled segments\r\n   * @example const username = getUser().name;\r\n   *    chic.group(['Signed in as:', username], '', chic.fontWeight.bold()) */\r\n  group(strs: string[], ...styles: string[]): void;\r\n  /** Logs to the group level console using a tagged template\r\n   * @example chic.group`Total | ${''}Success${chic.color.green()} | ${''}Failed${chic.color.red()}`; */\r\n  group(strs: TemplateStringsArray, ...styles: string[]): void;\r\n  /** Logs to the groupCollapsed level console. Use this syntax when you want to apply styling to a variable\r\n   * @param strs Text to display. Include variables that need styling here\r\n   * @param styles Style strings in order, including empty strings for unstyled segments\r\n   * @example const username = getUser().name;\r\n   *    chic.groupCollapsed(['Signed in as:', username], '', chic.fontWeight.bold()) */\r\n  groupCollapsed(strs: string[], ...styles: string[]): void;\r\n  /** Logs to the groupCollapsed level console using a tagged template\r\n   * @example chic.groupCollapsed`Total | ${''}Success${chic.color.green()} | ${''}Failed${chic.color.red()}`; */\r\n  groupCollapsed(strs: TemplateStringsArray, ...styles: string[]): void;\r\n  /** Ends the current console group */\r\n  groupEnd(): void;\r\n  /** Logs to the default level console. Use this syntax when you want to apply styling to a variable\r\n   * @param strs Text to display. Include variables that need styling here\r\n   * @param styles Style strings in order, including empty strings for unstyled segments\r\n   * @example const username = getUser().name;\r\n   *    chic.info(['Signed in as:', username], '', chic.fontWeight.bold()) */\r\n  info(strs: string[], ...styles: string[]): void;\r\n  /** Logs to the default level console using a tagged template\r\n   * @example chic.info`Total | ${''}Success${chic.color.green()} | ${''}Failed${chic.color.red()}`; */\r\n  info(strs: TemplateStringsArray, ...styles: string[]): void;\r\n  /** Logs to the default level console. Use this syntax when you want to apply styling to a variable\r\n   * @param strs Text to display. Include variables that need styling here\r\n   * @param styles Style strings in order, including empty strings for unstyled segments\r\n   * @example const username = getUser().name;\r\n   *    chic.log(['Signed in as:', username], '', chic.fontWeight.bold()) */\r\n  log(strs: string[], ...styles: string[]): void;\r\n  /** Logs to the default level console using a tagged template\r\n   * @example chic.log`Total | ${''}Success${chic.color.green()} | ${''}Failed${chic.color.red()}`; */\r\n  log(strs: TemplateStringsArray, ...styles: string[]): void;\r\n  /** Logs to the warn level console. Use this syntax when you want to apply styling to a variable\r\n   * @param strs Text to display. Include variables that need styling here\r\n   * @param styles Style strings in order, including empty strings for unstyled segments\r\n   * @example const username = getUser().name;\r\n   *    chic.warn(['Signed in as:', username], '', chic.fontWeight.bold()) */\r\n  warn(strs: string[], ...styles: string[]): void;\r\n  /** Logs to the warn level console using a tagged template\r\n   * @example chic.warn`Total | ${''}Success${chic.color.green()} | ${''}Failed${chic.color.red()}`; */\r\n  warn(strs: TemplateStringsArray, ...styles: string[]): void;\r\n};\r\n"],
  "mappings": "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",
  "names": ["str", "chic"]
}
